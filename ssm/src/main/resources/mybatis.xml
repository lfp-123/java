<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
    <!--引入jdbc.properties配置文件-->
    <properties resource="jdbc.properties"></properties>
    <!--配置使用-->

    <settings>
        <setting name="jdbcTypeForNull" value="NULL" />

        <!--开启日志 可以观察mybatis的运行过程 效果比原来的showSQL formatsql更好-->
        <setting name="logImpl" value="STDOUT_LOGGING" />
        <!--开启缓存，默认开启-->
        <setting name="cacheEnabled" value="true"/>
        <!--设置延迟加载-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="false"/>
    </settings>
    <plugins>
        <plugin interceptor="com.github.pagehelper.PageHelper">
        <!-- 4.0.0以后版本可以不设置该参数 -->
        <property name="dialect" value="mysql"/>
        <!-- 该参数默认为false -->
        <!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 -->
        <!-- 和startPage中的pageNum效果一样-->
        <property name="offsetAsPageNum" value="true"/>
        <!-- 该参数默认为false -->
        <!-- 设置为true时，使用RowBounds分页会进行count查询 -->
        <property name="rowBoundsWithCount" value="true"/>
        <!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->
        <!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型）-->
        <property name="pageSizeZero" value="true"/>
        <!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 -->
        <!-- 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 -->
        <!-- 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->
        <property name="reasonable" value="false"/>
        <!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 -->
        <!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 -->
        <!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,orderBy,不配置映射的用默认值 -->
        <!-- 不理解该含义的前提下，不要随便复制该配置 -->
        <property name="params" value="pageNum=pageHelperStart;pageSize=pageHelperRows;"/>
        <!-- 支持通过Mapper接口参数来传递分页参数 -->
        <property name="supportMethodsArguments" value="false"/>
        <!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page -->
        <property name="returnPageInfo" value="none"/>
    </plugin>
    </plugins>
    <!---->
    <!--数据库连接池信息-->
    <environments default="oracledb">
        <environment id="oracledb">
            <!--配置事务管理方式，指定为使用jdbc的事务
                mybatis 是通过连接做事务 hibernate是通过session做事务 -->
            <transactionManager type="JDBC"></transactionManager>
            <!--指定数据源，type pooled必须指定为连接池
            为什么使用连接池：
                在一个容器先定义指定数量的数据库连接
                如果想使用，只能是获取 使用后再放回去 如果使用数量不够 还会自动创建更多的连接，这样节省很多
                连接数据的时间和资源，相当于以空间换时间的方式提高了程序的效率-->

            <dataSource type="pooled">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>

    </environments>
    <!-- 配置mapper.xml文件位置 -->
    <!--<mappers>-->
        <!--&lt;!&ndash;<mapper resource="com/seecen/mybatis/mapper/HDeptMapper.xml"/>&ndash;&gt;-->
        <!--&lt;!&ndash;&lt;!&ndash;使用注解时，我们配置mapper 接口&ndash;&gt;&ndash;&gt;-->
        <!--&lt;!&ndash;<mapper class="com.seecen.mybatis.mapper.HClassMapper"/>&ndash;&gt;-->
        <!--<mapper class="com.seecen.ssm.mapper.OAdminMapper"></mapper>-->
        <!--<mapper class="com.seecen.ssm.mapper.OArticleMapper"></mapper>-->
        <!--<mapper class="com.seecen.ssm.mapper.OCategoryMapper"></mapper>-->
        <!--<mapper class="com.seecen.ssm.mapper.OFeedbackMapper"></mapper>-->
        <!--<mapper class="com.seecen.ssm.mapper.OLogMapper"></mapper>-->
        <!--<mapper class="com.seecen.ssm.mapper.OMenuMapper"></mapper>-->
        <!--<mapper class="com.seecen.ssm.mapper.ORoleMapper"></mapper>-->

    <!--</mappers>-->

</configuration>